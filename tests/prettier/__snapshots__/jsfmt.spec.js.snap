exports[`test directives.js 1`] = `
"\"use strict\";

function fn() {
  \"use strict\";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\"use strict\";

function fn() {
  \"use strict\";
}
"
`;

exports[`test exports.js 1`] = `
"export { value1, value2 as value2_renamed, value3, value4 as value4_renamed, value5 } from \"exports\";
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export {
  value1,
  value2 as value2_renamed,
  value3,
  value4 as value4_renamed,
  value5
} from \"exports\";
"
`;

exports[`test jsx-multiline-assign.js 1`] = `
"const comp1 = (
  <div style={styles} key=\"something\">
    Keep the wrapping parens.
  </div>
);

const comp2 = <div style={styles} key=\"something\">
  Create wrapping parens.
</div>;

comp2A = <div style={styles} key=\"something\">
  Create wrapping parens.
</div>;

const comp3 = <div style={styles} key=\"something\">Bump to next line without parens</div>;

const comp4 = <div style={styles} key=\"something\">Create wrapping parens and indent <strong>all the things</strong>.</div>;

const comp5 = <div>Keep it on one line.</div>;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const comp1 = (
  <div style={styles} key=\"something\">
    Keep the wrapping parens.
  </div>
);

const comp2 = (
  <div style={styles} key=\"something\">
    Create wrapping parens.
  </div>
);

comp2A = (
  <div style={styles} key=\"something\">
    Create wrapping parens.
  </div>
);

const comp3 = (
  <div style={styles} key=\"something\">Bump to next line without parens</div>
);

const comp4 = (
  <div style={styles} key=\"something\">
    Create wrapping parens and indent{\' \'}<strong>all the things</strong>.
  </div>
);

const comp5 = <div>Keep it on one line.</div>;
"
`;

exports[`test jsx-significant-space.js 1`] = `
"after =
  <span>
      foo <span>bar</span>
  </span>

before =
  <span>
    <span>bar</span> foo
  </span>

before_break =
  <span>
    <span>bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar</span> foo
  </span>

after_break =
  <span>
    foo <span>bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar</span>
  </span>

within =
  <span>
    foo <span> bar </span>
  </span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
after = (
  <span>
    foo{\' \'}<span>bar</span>
  </span>
);

before = (
  <span>
    <span>bar</span>{\' \'}foo
  </span>
);

before_break = (
  <span>
    <span>
      bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar
    </span>{\' \'}foo
  </span>
);

after_break = (
  <span>
    foo{\' \'}<span>
      bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar
    </span>
  </span>
);

within = (
  <span>
    foo{\' \'}<span>{\' \'}bar{\' \'}</span>
  </span>
);
"
`;

exports[`test jsx-split-attrs.js 1`] = `
"long_closed =
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\"/>

long_open =
  <BaseForm url=\"/auth/google\" method=\"GET\" colour=\"blue\" size=\"large\" submitLabel=\"Sign in with Google\">
    hello
  </BaseForm>

short_closed =
  <BaseForm url=\"/auth/google\" method=\"GET\"/>

short_open =
  <BaseForm url=\"/auth/google\" method=\"GET\">
    hello
  </BaseForm>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
long_closed = (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  />
);

long_open = (
  <BaseForm
    url=\"/auth/google\"
    method=\"GET\"
    colour=\"blue\"
    size=\"large\"
    submitLabel=\"Sign in with Google\"
  >
    hello
  </BaseForm>
);

short_closed = <BaseForm url=\"/auth/google\" method=\"GET\" />;

short_open = (
  <BaseForm url=\"/auth/google\" method=\"GET\">
    hello
  </BaseForm>
);
"
`;

exports[`test jsx-stateless-arrow-fn.js 1`] = `
"const render1 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Keep the wrapping parens. Put each key on its own line.
  </div>
);

const render2 = ({ styles }) => <div style={styles} key=\"something\">
  Create wrapping parens.
</div>;

const render3 = ({ styles }) => <div style={styles} key=\"something\">Bump to next line without parens</div>;

const render4 = ({ styles }) => <div style={styles} key=\"something\">Create wrapping parens and indent <strong>all the things</strong>.</div>;

const render5 = ({ styles }) => <div>Keep it on one line.</div>;

const render6 = ({ styles }) => (
  <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\">
    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div>
    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div>
    <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>
      <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\" attr4>ddd d dd d d dddd dddd <strong>hello</strong></div> <strong>hello</strong></div>
  </div>
)

const render7 = () =>
  <div>
    <span /><span>Dont break each elem onto its own line.</span> <span />
    <div /> <div />
  </div>

const render8 = (props) => <div>{props.text}</div>
const render9 = (props) => <div>{props.looooooooooooooooooooooooooooooong_text}</div>
const render10 = (props) => <div>{props.even_looooooooooooooooooooooooooooooooooooooooooonger_contents}</div>

const notJSX = (aaaaaaaaaaaaaaaaa, bbbbbbbbbbb) => this.someLongCallWithParams(aaaaaa, bbbbbbb).anotherLongCallWithParams(cccccccccccc, dddddddddddddddddddddd)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const render1 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Keep the wrapping parens. Put each key on its own line.
  </div>
);

const render2 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Create wrapping parens.
  </div>
);

const render3 = ({ styles }) => (
  <div style={styles} key=\"something\">Bump to next line without parens</div>
);

const render4 = ({ styles }) => (
  <div style={styles} key=\"something\">
    Create wrapping parens and indent{\' \'}<strong>all the things</strong>.
  </div>
);

const render5 = ({ styles }) => <div>Keep it on one line.</div>;

const render6 = ({ styles }) => (
  <div attr1=\"aaaaaaaaaaaaaaaaa\" attr2=\"bbbbbbbbbbb\" attr3=\"cccccccccccc\">
    <div
      attr1=\"aaaaaaaaaaaaaaaaa\"
      attr2=\"bbbbbbbbbbb\"
      attr3=\"cccccccccccc\"
      attr4
    >
      ddd d dd d d dddd dddd{\' \'}<strong>hello</strong>
    </div>
    <div
      attr1=\"aaaaaaaaaaaaaaaaa\"
      attr2=\"bbbbbbbbbbb\"
      attr3=\"cccccccccccc\"
      attr4
    >
      ddd d dd d d dddd dddd{\' \'}<strong>hello</strong>
    </div>
    <div
      attr1=\"aaaaaaaaaaaaaaaaa\"
      attr2=\"bbbbbbbbbbb\"
      attr3=\"cccccccccccc\"
      attr4
    >
      <div
        attr1=\"aaaaaaaaaaaaaaaaa\"
        attr2=\"bbbbbbbbbbb\"
        attr3=\"cccccccccccc\"
        attr4
      >
        ddd d dd d d dddd dddd{\' \'}<strong>hello</strong>
      </div>{\' \'}<strong>hello</strong>
    </div>
  </div>
);

const render7 = () => (
  <div>
    <span /><span>Dont break each elem onto its own line.</span>{\' \'}<span />
    <div />{\' \'}<div />
  </div>
);

const render8 = props => <div>{props.text}</div>;
const render9 = props => (
  <div>{props.looooooooooooooooooooooooooooooong_text}</div>
);
const render10 = props => (
  <div>
    {props.even_looooooooooooooooooooooooooooooooooooooooooonger_contents}
  </div>
);

const notJSX = (aaaaaaaaaaaaaaaaa, bbbbbbbbbbb) =>
  this
    .someLongCallWithParams(aaaaaa, bbbbbbb)
    .anotherLongCallWithParams(cccccccccccc, dddddddddddddddddddddd);
"
`;

exports[`test method-chain.js 1`] = `
"method().then(x => x)
  [\"abc\"](x => x)
  [abc](x => x);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method()
  .then(x => x)
  [\"abc\"](x => x)
  [abc](x => x);
"
`;

exports[`test optional-type-name.js 1`] = `
"type Foo = (any) => string

type Bar = { [string]: number }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
type Foo = (any) => string;

type Bar = { [string]: number };
"
`;
